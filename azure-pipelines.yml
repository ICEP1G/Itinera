name: $(Build.DefinitionName)_$(date:yyyyMMdd).$(rev:r)  # Définit le format du numéro de build

trigger:
  branches:
    include:
      - main  # Déclenche la pipeline pour tout merge vers la branche main

pool:
  name: 'Self-Hosted agent' # Nom du pool d'agent à utiliser
  vmImage: 'windows-latest'  # Utilise une machine virtuelle Windows pour exécuter le pipeline

variables:
  buildConfiguration: 'Release'  # Configuration de build
  solutionPath: 'Itinera.Client.sln'  # Chemin vers la solution
  majorVersion: 0  # Numéro de version majeure
  minorVersion: 0  # Numéro de version mineure
  patchVersion: $(Build.BuildId)  # Utilise l'ID de build comme numéro de patch


steps:

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '9.x'
    includePreviewVersions: false
  displayName: 'Install .NET SDK'

- script: |
    dotnet nuget remove source ItineraFeed
    dotnet workload restore
    dotnet workload install android
  displayName: 'Restore .NET Workloads' # Analyse et installe les charges de travail manquantes (obligatoire pour le projet MAUI)

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'  # Installe NuGet sur l'agent de build

- task: NuGetAuthenticate@1
  displayName: 'Authenticate to NuGet feeds'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solutionPath)'
  displayName: 'Restore NuGet packages'  # Restaure les packages NuGet pour la solution

- task: VSBuild@1
  inputs:
    solution: '$(solutionPath)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/t:restore /t:build'
  displayName: 'Build the solution'  # Construit l'ensemble de la solution

- task: VSTest@2
  inputs:
    testAssemblyVer2: |
      **\$(buildConfiguration)\net9.0\Itinera.Client.Tests.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
  displayName: 'Execute all unit tests'  # Exécute les tests unitaires